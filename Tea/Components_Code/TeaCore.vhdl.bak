library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
--use ieee.numeric_bit.all;

entity TeaCore is
    port (
--        clk             : in std_logic;
--        start           : in std_logic;
        vi      	      : in std_logic_vector (63 downto 0);
		  vo      	      : out std_logic_vector (63 downto 0);
		  key             : in std_logic_vector(127 downto 0);
--		  mode            : out std_logic
	 );
end entity TeaCore;

architecture behave of TeaCore is

   signal k0  		  		: unsigned(31 downto 0);
	signal k1    			: unsigned(31 downto 0);
	signal k2    			: unsigned(31 downto 0);
	signal k3    			: unsigned(31 downto 0);
	
	signal di0				: unsigned(31 downto 0);
	signal di1				: unsigned(31 downto 0);
	
	signal do0				: unsigned(31 downto 0);
	signal do1				: unsigned(31 downto 0);
	
	signal delta			: unsigned(31 downto 0);
	signal sum				: unsigned(31 downto 0);
	
begin

--	 sum += delta;
--  v0 += ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
--  v1 += ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);  

	sum <= to_unsigned(0, sum'length);
	delta <= "10011110001101110111100110111001";

	k0 <= unsigned(key(31 downto 0));
	k1 <= unsigned(key(63 downto 32));
	k2 <= unsigned(key(95 downto 64));
	k3 <= unsigned(key(127 downto 96));
		 
   process (clk) begin
		
		st0 <= (di1 + k0) + ((di1(25 downto 0) & "000000") xor ("00000000" & di1(31 downto 8)));
		st1 <= (di0 + k0) + ((di0(25 downto 0) & "000000") xor ("00000000" & di0(31 downto 8)));
		
		vo(31 downto 0) <= std_logic_vector(st0);
		vo(63 downto 32) <= std_logic_vector(st1);

    end process;

end behave;
